{
  "version": 3,
  "sources": ["../../react-bootstrap/esm/NavbarContext.js", "../../dom-helpers/esm/contains.js", "../../@restart/ui/esm/useWindow.js"],
  "sourcesContent": ["\"use client\";\r\n\r\nimport * as React from 'react';\r\n\r\n// TODO: check\r\n\r\nconst context = /*#__PURE__*/React.createContext(null);\r\ncontext.displayName = 'NavbarContext';\r\nexport default context;", "/* eslint-disable no-bitwise, no-cond-assign */\r\n\r\n/**\r\n * Checks if an element contains another given element.\r\n * \r\n * @param context the context element\r\n * @param node the element to check\r\n */\r\nexport default function contains(context, node) {\r\n  // HTML DOM and SVG DOM may have different support levels,\r\n  // so we need to check on context instead of a document root element.\r\n  if (context.contains) return context.contains(node);\r\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\r\n}", "import { createContext, useContext } from 'react';\r\nimport canUseDOM from 'dom-helpers/canUseDOM';\r\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\r\nexport const WindowProvider = Context.Provider;\r\n\r\n/**\r\n * The document \"window\" placed in React context. Helpful for determining\r\n * SSR context, or when rendering into an iframe.\r\n *\r\n * @returns the current window\r\n */\r\nexport default function useWindow() {\r\n  return useContext(Context);\r\n}"],
  "mappings": ";;;;;;;;;;;AAEA,YAAuB;AAIvB,IAAM,UAA6B,oBAAc,IAAI;AACrD,QAAQ,cAAc;AACtB,IAAO,wBAAQ;;;ACAA,SAAR,SAA0BA,UAAS,MAAM;AAG9C,MAAIA,SAAQ;AAAU,WAAOA,SAAQ,SAAS,IAAI;AAClD,MAAIA,SAAQ;AAAyB,WAAOA,aAAY,QAAQ,CAAC,EAAEA,SAAQ,wBAAwB,IAAI,IAAI;AAC7G;;;ACbA,mBAA0C;AAE1C,IAAM,cAAuB,4BAAc,oBAAY,SAAS,MAAS;AAClE,IAAM,iBAAiB,QAAQ;AAQvB,SAAR,YAA6B;AAClC,aAAO,yBAAW,OAAO;AAC3B;",
  "names": ["context"]
}
