{
  "version": 3,
  "sources": ["../../@restart/ui/esm/SelectableContext.js", "../../react-bootstrap/esm/NavbarContext.js", "../../dom-helpers/esm/contains.js", "../../@restart/ui/esm/DataKey.js", "../../@restart/ui/esm/useWindow.js", "../../dom-helpers/esm/querySelectorAll.js"],
  "sourcesContent": ["import * as React from 'react';\r\nconst SelectableContext = /*#__PURE__*/React.createContext(null);\r\nexport const makeEventKey = (eventKey, href = null) => {\r\n  if (eventKey != null) return String(eventKey);\r\n  return href || null;\r\n};\r\nexport default SelectableContext;", "\"use client\";\r\n\r\nimport * as React from 'react';\r\n\r\n// TODO: check\r\n\r\nconst context = /*#__PURE__*/React.createContext(null);\r\ncontext.displayName = 'NavbarContext';\r\nexport default context;", "/* eslint-disable no-bitwise, no-cond-assign */\r\n\r\n/**\r\n * Checks if an element contains another given element.\r\n * \r\n * @param context the context element\r\n * @param node the element to check\r\n */\r\nexport default function contains(context, node) {\r\n  // HTML DOM and SVG DOM may have different support levels,\r\n  // so we need to check on context instead of a document root element.\r\n  if (context.contains) return context.contains(node);\r\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\r\n}", "export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\r\nexport const PROPERTY_PREFIX = `rrUi`;\r\nexport function dataAttr(property) {\r\n  return `${ATTRIBUTE_PREFIX}${property}`;\r\n}\r\nexport function dataProp(property) {\r\n  return `${PROPERTY_PREFIX}${property}`;\r\n}", "import { createContext, useContext } from 'react';\r\nimport canUseDOM from 'dom-helpers/canUseDOM';\r\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\r\nexport const WindowProvider = Context.Provider;\r\n\r\n/**\r\n * The document \"window\" placed in React context. Helpful for determining\r\n * SSR context, or when rendering into an iframe.\r\n *\r\n * @returns the current window\r\n */\r\nexport default function useWindow() {\r\n  return useContext(Context);\r\n}", "var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\r\n/**\r\n * Runs `querySelectorAll` on a given element.\r\n * \r\n * @param element the element\r\n * @param selector the selector\r\n */\r\n\r\nexport default function qsa(element, selector) {\r\n  return toArray(element.querySelectorAll(selector));\r\n}"],
  "mappings": ";;;;;;;;;;;AAAA,YAAuB;AACvB,IAAM,oBAAuC,oBAAc,IAAI;AACxD,IAAM,eAAe,CAAC,UAAU,OAAO,SAAS;AACrD,MAAI,YAAY;AAAM,WAAO,OAAO,QAAQ;AAC5C,SAAO,QAAQ;AACjB;AACA,IAAO,4BAAQ;;;ACJf,IAAAA,SAAuB;AAIvB,IAAM,UAA6B,qBAAc,IAAI;AACrD,QAAQ,cAAc;AACtB,IAAO,wBAAQ;;;ACAA,SAAR,SAA0BC,UAAS,MAAM;AAG9C,MAAIA,SAAQ;AAAU,WAAOA,SAAQ,SAAS,IAAI;AAClD,MAAIA,SAAQ;AAAyB,WAAOA,aAAY,QAAQ,CAAC,EAAEA,SAAQ,wBAAwB,IAAI,IAAI;AAC7G;;;ACbO,IAAM,mBAAmB;AACzB,IAAM,kBAAkB;AACxB,SAAS,SAAS,UAAU;AACjC,SAAO,GAAG,gBAAgB,GAAG,QAAQ;AACvC;AACO,SAAS,SAAS,UAAU;AACjC,SAAO,GAAG,eAAe,GAAG,QAAQ;AACtC;;;ACPA,mBAA0C;AAE1C,IAAM,cAAuB,4BAAc,oBAAY,SAAS,MAAS;AAClE,IAAM,iBAAiB,QAAQ;AAQvB,SAAR,YAA6B;AAClC,aAAO,yBAAW,OAAO;AAC3B;;;ACbA,IAAI,UAAU,SAAS,UAAU,KAAK,KAAK,SAAS,UAAU,MAAM,CAAC,EAAE,KAAK;AAQ7D,SAAR,IAAqB,SAAS,UAAU;AAC7C,SAAO,QAAQ,QAAQ,iBAAiB,QAAQ,CAAC;AACnD;",
  "names": ["React", "context"]
}
